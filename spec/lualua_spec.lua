describe('lualua', function()
  local lib = require('lualua')

  local function nr(k, ...)
    assert.same(k, select('#', ...))
    return ...
  end

  it('creates an empty state', function()
    local state = lib.newstate()
    assert.same('userdata', type(state))
    assert.same(0, nr(1, state:gettop()))
  end)

  it('can do basic stack manipulations', function()
    local state = lib.newstate()
    nr(0, state:pushnumber(42))
    assert.same(1, state:gettop())
    assert.same(42, state:tonumber(1))
    assert.same(42, state:tonumber(-1))
    state:pushstring('abc')
    assert.same(2, state:gettop())
    assert.same(42, state:tonumber(1))
    assert.same('abc', state:tostring(2))
    assert.same('abc', state:tostring(-1))
    assert.same(42, state:tonumber(-2))
    nr(0, state:pop(1))
    assert.same(1, state:gettop())
    assert.same(42, state:tonumber(1))
    assert.same(42, state:tonumber(-1))
  end)

  it('can do basic table manipulations', function()
    local state = lib.newstate()
    nr(0, state:newtable())
    assert.same(1, state:gettop())
    state:pushnumber(42)
    nr(0, state:gettable(-2))
    assert.same(2, state:gettop())
    assert.same('nil', state:typename(2))
    state:pop(1)
    assert.same(1, state:gettop())
    assert.same('table', state:typename(1))
    state:pushnumber(42)
    state:pushstring('value')
    nr(0, state:settable(-3))
    assert.same(1, state:gettop())
    assert.same('table', state:typename(1))
    state:pushnumber(42)
    state:gettable(-2)
    assert.same(2, state:gettop())
    assert.same('string', state:typename(-1))
    assert.same('value', state:tostring(-1))
  end)

  it('has constants', function()
    assert.same('number', type(lib.GLOBALSINDEX))
    assert.same('number', type(lib.REGISTRYINDEX))
    assert.same('number', type(lib.TNIL))
    assert.same('nil', type(lib.nonsense))
  end)

  it('does not panic on error', function()
    local function fn()
      lib.newstate():gettable(42)
    end
    assert.has.errors(fn, 'attempt to index non-table value')
  end)

  it('can load strings', function()
    local state = lib.newstate()
    assert.same(0, nr(1, state:loadstring('return 42')))
    nr(0, state:call(0, 1))
    assert.same(42, state:tonumber(-1))
  end)
end)
